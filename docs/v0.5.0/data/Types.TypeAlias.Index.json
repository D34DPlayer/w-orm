{"id":85,"name":"Index","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"summary":[{"kind":"text","text":"Indexes are a feature of IndexedDB that allow for faster queries if used properly."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\n// 1st use case, multi-field ordering:\n//  An index can be created with multiple fields, when using that index the results will be ordered by the fields in the index.\n\n@Table({\n  indexes: {\n    nameAge: {\n      fields: ['name', 'age'],\n    },\n  },\n})\nclass Test extends Model {\n  id!: number\n  name!: string\n  age!: number\n}\n\n// The results will be ordered by name and then by age\nawait Test.withIndex('nameAge').all()\n\n// 2nd use case, unique fields:\n//  An index can be created with the `unique` option, this will enforce that the field, or combination of fields is unique.\n@Table({\n  indexes: {\n    uniqueName: { fields: ['firstName', 'lastName'], unique: true },\n }\n})\nclass Test2 extends Model {\n  id!: number\n  firstName!: string\n  lastName!: string\n}\n\nawait Test2.create({ firstName: 'John', lastName: 'Doe', id: 1 })\n// This will fail\nawait Test2.create({ firstName: 'John', lastName: 'Doe', id: 2 })\n\n// 3rd use case, multi-field filtering:\n//  An index with multiple fields can also be used to speed up filtering.\n@Table({\n  indexes: {\n    nameAge: {\n      fields: ['name', 'age'],\n    },\n  },\n})\nclass Test3 extends Model {\n id!: number\n name!: string\n age!: number\n}\n// Looking for people named John that are 30 years old\nawait Test3.withIndex('nameAge', Between(['John', 30], ['John', 30])).all()\n// The alternative will only use the name index and check the age for each result\nawait Test3.filter({ name: 'John', age: 30 }).all()\n// \"Between\" can also be used for ranges, eg. looking for people named John that are between 30 and 40 years old\nawait Test3.withIndex('nameAge', Between(['John', 30], ['John', 40])).all()\n\n// 4th use case, filter + ordering:\n//  You can combine all this information and use the first field(s) for filtering and leaving the rest for ordering.\n\n// Looking for people named John, ordered by age\nawait Test3.withIndex('nameAge', Between(['John', BetweenFilter.minKey], ['John', BetweenFilter.maxKey])).all()\n```"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"Between","target":357},{"kind":"text","text":" for more information about the "},{"kind":"code","text":"`Between`"},{"kind":"text","text":" filter"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB#using_an_index"},{"kind":"text","text":"\n"}]}]},"children":[],"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":202,"character":12,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L202"}],"type":{"type":"reflection","declaration":{"id":86,"name":"Index","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":89,"name":"fields","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":205,"character":2,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L205"}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.Index","hash":"fields"},"text":{},"parentId":85},{"id":88,"name":"multiEntry","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":204,"character":2,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L204"}],"type":{"type":"intrinsic","name":"boolean"},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.Index","hash":"multiEntry"},"text":{},"parentId":85},{"id":87,"name":"unique","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":203,"character":2,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L203"}],"type":{"type":"intrinsic","name":"boolean"},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.Index","hash":"unique"},"text":{},"parentId":85}],"groups":[{"title":"Properties","children":[89,88,87]}],"sources":[{"fileName":"types.ts","line":202,"character":20,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L202"}],"location":{"query":"Types.TypeAlias.Index","hash":""}}},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.Index","hash":""},"text":{"comment":"<p>Indexes are a feature of IndexedDB that allow for faster queries if used properly.</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// 1st use case, multi-field ordering:</span>\n<span class=\"pl-c\">//  An index can be created with multiple fields, when using that index the results will be ordered by the fields in the index.</span>\n\n@<span class=\"pl-en\">Table</span>({\n  indexes: {\n    nameAge: {\n      fields: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>age<span class=\"pl-pds\">'</span></span>],\n    },\n  },\n})\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Test</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Model</span> {\n  <span class=\"pl-v\">id</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">number</span>\n  <span class=\"pl-v\">name</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n  <span class=\"pl-v\">age</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">number</span>\n}\n\n<span class=\"pl-c\">// The results will be ordered by name and then by age</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">Test</span>.<span class=\"pl-en\">withIndex</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>nameAge<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">all</span>()\n\n<span class=\"pl-c\">// 2nd use case, unique fields:</span>\n<span class=\"pl-c\">//  An index can be created with the `unique` option, this will enforce that the field, or combination of fields is unique.</span>\n@<span class=\"pl-en\">Table</span>({\n  indexes: {\n    uniqueName: { fields: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>firstName<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>lastName<span class=\"pl-pds\">'</span></span>], unique: <span class=\"pl-c1\">true</span> },\n }\n})\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Test2</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Model</span> {\n  <span class=\"pl-v\">id</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">number</span>\n  <span class=\"pl-v\">firstName</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n  <span class=\"pl-v\">lastName</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n}\n\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">Test2</span>.<span class=\"pl-en\">create</span>({ firstName: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, lastName: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Doe<span class=\"pl-pds\">'</span></span>, id: <span class=\"pl-c1\">1</span> })\n<span class=\"pl-c\">// This will fail</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">Test2</span>.<span class=\"pl-en\">create</span>({ firstName: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, lastName: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Doe<span class=\"pl-pds\">'</span></span>, id: <span class=\"pl-c1\">2</span> })\n\n<span class=\"pl-c\">// 3rd use case, multi-field filtering:</span>\n<span class=\"pl-c\">//  An index with multiple fields can also be used to speed up filtering.</span>\n@<span class=\"pl-en\">Table</span>({\n  indexes: {\n    nameAge: {\n      fields: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>age<span class=\"pl-pds\">'</span></span>],\n    },\n  },\n})\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Test3</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Model</span> {\n <span class=\"pl-v\">id</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">number</span>\n <span class=\"pl-v\">name</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n <span class=\"pl-v\">age</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">number</span>\n}\n<span class=\"pl-c\">// Looking for people named John that are 30 years old</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">Test3</span>.<span class=\"pl-en\">withIndex</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>nameAge<span class=\"pl-pds\">'</span></span>, <span class=\"pl-en\">Between</span>([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">30</span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">30</span>])).<span class=\"pl-c1\">all</span>()\n<span class=\"pl-c\">// The alternative will only use the name index and check the age for each result</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">Test3</span>.<span class=\"pl-en\">filter</span>({ name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, age: <span class=\"pl-c1\">30</span> }).<span class=\"pl-c1\">all</span>()\n<span class=\"pl-c\">// \"Between\" can also be used for ranges, eg. looking for people named John that are between 30 and 40 years old</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">Test3</span>.<span class=\"pl-en\">withIndex</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>nameAge<span class=\"pl-pds\">'</span></span>, <span class=\"pl-en\">Between</span>([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">30</span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">40</span>])).<span class=\"pl-c1\">all</span>()\n\n<span class=\"pl-c\">// 4th use case, filter + ordering:</span>\n<span class=\"pl-c\">//  You can combine all this information and use the first field(s) for filtering and leaving the rest for ordering.</span>\n\n<span class=\"pl-c\">// Looking for people named John, ordered by age</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">Test3</span>.<span class=\"pl-en\">withIndex</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>nameAge<span class=\"pl-pds\">'</span></span>, <span class=\"pl-en\">Between</span>([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">BetweenFilter</span>.<span class=\"pl-smi\">minKey</span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">BetweenFilter</span>.<span class=\"pl-smi\">maxKey</span>])).<span class=\"pl-c1\">all</span>()\n</code></pre>\n<h5>See:</h5><ul>\n<li><a href=\"357\">Between</a> for more information about the <code>Between</code> filter</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB#using_an_index\">https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB#using_an_index</a></li>\n</ul>\n"},"parentId":2}
