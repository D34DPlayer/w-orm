{"id":17,"name":"FieldOptions","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"summary":[{"kind":"text","text":"Describes a field on a model.\n\nMultiple options can be passed to the decorator:\n - "},{"kind":"code","text":"`primaryKey`"},{"kind":"text","text":": Whether the field is the primary key of the model,\n                 if multiple fields are marked as primary key, their combination will be the key.\n - "},{"kind":"code","text":"`unique`"},{"kind":"text","text":": Whether the field has an unique constraint. This will be enforced by the database.\n - "},{"kind":"code","text":"`nullable`"},{"kind":"text","text":": Whether the field can be null, primary keys cannot be nullable.\n - "},{"kind":"code","text":"`default`"},{"kind":"text","text":": The default value of the field, it can be a value or a function that returns the value.\n - "},{"kind":"code","text":"`type`"},{"kind":"text","text":": The type of the field, it is automatically inferred with typescript.\n - "},{"kind":"code","text":"`index`"},{"kind":"text","text":": Whether the field should be indexed, it is recommended to keep it unless the type isn't indexable (eg. a Blob)."}]},"children":[],"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":28,"character":12,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L28"}],"typeParameters":[{"id":29,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":18,"name":"FieldOptions","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":22,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":32,"character":2,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L32"}],"type":{"type":"union","types":[{"type":"reference","id":29,"name":"T"},{"type":"reflection","declaration":{"id":23,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"types.ts","line":32,"character":17,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L32"}],"signatures":[{"id":24,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":29,"name":"T"}}]}}]},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.FieldOptions","hash":"default"},"text":{},"parentId":17},{"id":28,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":34,"character":2,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L34"}],"type":{"type":"intrinsic","name":"boolean"},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.FieldOptions","hash":"index"},"text":{},"parentId":17},{"id":21,"name":"nullable","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":31,"character":2,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L31"}],"type":{"type":"intrinsic","name":"boolean"},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.FieldOptions","hash":"nullable"},"text":{},"parentId":17},{"id":19,"name":"primaryKey","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":29,"character":2,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L29"}],"type":{"type":"intrinsic","name":"boolean"},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.FieldOptions","hash":"primaryKey"},"text":{},"parentId":17},{"id":25,"name":"type","kind":4096,"kindString":"Property","flags":{},"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":33,"character":2,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L33"}],"type":{"type":"reflection","declaration":{"id":26,"name":"type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"types.ts","line":33,"character":8,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L33"}],"signatures":[{"id":27,"name":"type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":29,"name":"T"},"is":{"declaration":false},"location":{"query":"Types.TypeAlias.FieldOptions","hash":"type.__type"},"text":{},"parentId":17}],"location":{"query":"Types.TypeAlias.FieldOptions","hash":"type"}}},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.FieldOptions","hash":"type"},"text":{},"parentId":17},{"id":20,"name":"unique","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"types.ts","fullFileName":"/home/runner/work/w-orm/w-orm/src/types.ts","line":30,"character":2,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L30"}],"type":{"type":"intrinsic","name":"boolean"},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.FieldOptions","hash":"unique"},"text":{},"parentId":17}],"groups":[{"title":"Properties","children":[22,28,21,19,20]},{"title":"Methods","children":[25]}],"sources":[{"fileName":"types.ts","line":28,"character":30,"url":"https://github.com/D34DPlayer/w-orm/blob/d03bd3b/src/types.ts#L28"}],"location":{"query":"Types.TypeAlias.FieldOptions","hash":""}}},"is":{"declaration":true},"location":{"query":"Types.TypeAlias.FieldOptions","hash":""},"text":{"comment":"<p>Describes a field on a model.</p>\n<p>Multiple options can be passed to the decorator:</p>\n<ul>\n<li><code>primaryKey</code>: Whether the field is the primary key of the model,\n          if multiple fields are marked as primary key, their combination will be the key.</li>\n<li><code>unique</code>: Whether the field has an unique constraint. This will be enforced by the database.</li>\n<li><code>nullable</code>: Whether the field can be null, primary keys cannot be nullable.</li>\n<li><code>default</code>: The default value of the field, it can be a value or a function that returns the value.</li>\n<li><code>type</code>: The type of the field, it is automatically inferred with typescript.</li>\n<li><code>index</code>: Whether the field should be indexed, it is recommended to keep it unless the type isn&#39;t indexable (eg. a Blob).</li>\n</ul>\n"},"parentId":2}
