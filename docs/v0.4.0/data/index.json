{"id":0,"name":"@d34d/w-orm - v0.4.0","kind":1,"flags":{},"originalName":"","children":[],"groups":[{"title":"Modules","children":[68,2,1]}],"is":{"declaration":false},"location":{"query":"index","hash":""},"text":{"readme":"\n<a href=\"#web-orm\" id=\"web-orm\" style=\"color: inherit; text-decoration: none;\">\n  <h1>W(eb)-ORM</h1>\n</a>\n<p><a href=\"https://codecov.io/gh/D34DPlayer/w-orm\"><img src=\"https://codecov.io/gh/D34DPlayer/w-orm/branch/main/graph/badge.svg?token=Y9OI2FEWVA\" alt=\"codecov\"></a></p>\n<p><a href=\"https://d34dplayer.github.io/w-orm\"><strong>Documentation</strong></a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a> is in theory every developer&#39;s dream, having a full database built-in into your browser is amazing. However, if you have tried using it, it&#39;ll feel lacking compared to an actual SQL database, or even a document database.</p>\n<p>This package&#39;s objective is to hide away this ugly truth and expose it with a nice ORM, so that you can forget this is far from being a fully fledged DB.</p>\n\n<a href=\"#overview\" id=\"overview\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Overview</h2>\n</a>\n<p>A table can be simply created as follows:</p>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">Field</span>, <span class=\"pl-smi\">Model</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>@d34d/w-orm<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-k\">enum</span> <span class=\"pl-en\">UserRole</span> {\n  <span class=\"pl-smi\">Admin</span>,\n  <span class=\"pl-smi\">Moderator</span>,\n  <span class=\"pl-smi\">Guest</span>,\n}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">User</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Model</span> {\n  @<span class=\"pl-en\">Field</span>({ primaryKey: <span class=\"pl-c1\">true</span>, <span class=\"pl-en\">default</span>: () <span class=\"pl-k\">=></span> <span class=\"pl-smi\">crypto</span>.<span class=\"pl-en\">randomUUID</span>() })\n  <span class=\"pl-v\">id</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n\n  @<span class=\"pl-en\">Field</span>({ unique: <span class=\"pl-c1\">true</span> })\n  <span class=\"pl-v\">username</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n\n  @<span class=\"pl-en\">Field</span>({ default: <span class=\"pl-smi\">UserRole</span>.<span class=\"pl-smi\">Guest</span> })\n  <span class=\"pl-v\">role</span><span class=\"pl-k\">!:</span> <span class=\"pl-en\">UserRole</span>\n\n  @<span class=\"pl-en\">Field</span>({ nullable: <span class=\"pl-c1\">true</span> })\n  <span class=\"pl-v\">email</span><span class=\"pl-k\">?:</span> <span class=\"pl-c1\">boolean</span>\n\n  @<span class=\"pl-en\">Field</span>({ default: <span class=\"pl-c1\">0</span> })\n  <span class=\"pl-v\">balance</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">number</span>\n}\n</code></pre>\n<p>And can be interacted with as follows:</p>\n<pre><code class=\"language-ts\"><span class=\"pl-c\">// With typing support!</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">user</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">create</span>({\n  username: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Joe<span class=\"pl-pds\">'</span></span>,\n  balance: <span class=\"pl-c1\">42</span>,\n})\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">allUsers</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">orderBy</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>id<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">all</span>()\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">otherUser</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">filter</span>({\n  username: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Carlos<span class=\"pl-pds\">'</span></span>,\n}).<span class=\"pl-en\">first</span>()\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">allAdmins</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">filter</span>({\n  role: <span class=\"pl-smi\">UserRole</span>.<span class=\"pl-smi\">Admin</span>,\n}).<span class=\"pl-c1\">all</span>()\n\n<span class=\"pl-c\">// Filters are more powerful than just checking values</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">everyoneInDebt</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">filter</span>({\n  <span class=\"pl-en\">balance</span>: (<span class=\"pl-v\">b</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">b</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>\n}).<span class=\"pl-c1\">all</span>()\n\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">otherUser</span>.<span class=\"pl-c1\">remove</span>()\n</code></pre>\n\n<a href=\"#installation\" id=\"installation\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Installation</h2>\n</a>\n<ol>\n<li><p>Install the npm package:\n<code>npm install @d34d/w-orm reflect-metadata</code></p>\n</li>\n<li><p>reflect-metadata needs to be imported somewhere in the global space of your app (eg. index.ts):\n <code>import &quot;reflect-metadata&quot;</code></p>\n</li>\n<li><p>Finally the following needs to be enabled in your <code>tsconfig.json</code></p>\n</li>\n</ol>\n<pre><code class=\"language-json\">{\n  <span class=\"pl-ent\">\"emitDecoratorMetadata\"</span>: <span class=\"pl-c1\">true</span>,\n  <span class=\"pl-ent\">\"experimentalDecorators\"</span>: <span class=\"pl-c1\">true</span>\n}\n</code></pre>\n\n<a href=\"#table-definition\" id=\"table-definition\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Table definition</h2>\n</a>\n<p>Tables are defined as classes extending the <code>Model</code> class and using the <code>Field</code> decorator:</p>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">class</span> <span class=\"pl-en\">User</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Model</span> {\n  <span class=\"pl-c\">// Primary key and generator function</span>\n  @<span class=\"pl-en\">Field</span>({ primaryKey: <span class=\"pl-c1\">true</span>, <span class=\"pl-en\">default</span>: () <span class=\"pl-k\">=></span> <span class=\"pl-smi\">crypto</span>.<span class=\"pl-en\">randomUUID</span>() })\n  <span class=\"pl-v\">id</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n  <span class=\"pl-c\">// Unique constraint</span>\n  @<span class=\"pl-en\">Field</span>({ unique: <span class=\"pl-c1\">true</span> })\n  <span class=\"pl-v\">username</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n  <span class=\"pl-c\">// Static default (equivalent to `() => \"guest\"`)</span>\n  @<span class=\"pl-en\">Field</span>({ default: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>guest<span class=\"pl-pds\">\"</span></span> })\n  <span class=\"pl-v\">role</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n  <span class=\"pl-c\">// nullable field, any other field will throw an error if not defined</span>\n  @<span class=\"pl-en\">Field</span>({ nullable: <span class=\"pl-c1\">true</span> })\n  <span class=\"pl-v\">email</span><span class=\"pl-k\">?:</span> <span class=\"pl-c1\">boolean</span>\n} \n</code></pre>\n<p>A <code>Field</code> has the following parameters:</p>\n<ul>\n<li><code>primaryKey</code>: Whether the field is the primary key of the model, if multiple fields are marked as primary key, their combination will be the key.<blockquote>\n<p><strong>Important note</strong>: A limitation in IndexedDB makes it so the primary key can&#39;t be changed once the table is created and W-ORM will throw an error, a way to circumvent this is explained in <a href=\"#migration-system\">migrations</a>.</p>\n</blockquote>\n</li>\n<li><code>unique</code>: Whether the field has an unique constraint. This will be enforced by the database.</li>\n<li><code>nullable</code>: Whether the field can be <code>null</code>/<code>undefined</code>, primary keys cannot be nullable.</li>\n<li><code>default</code>: The default value of the field, it can be a value or a function that returns the value.</li>\n<li><code>index</code>: Whether the field should be indexed, it is recommended to keep it unless the type isn&#39;t indexable (eg. a Blob).</li>\n</ul>\n<p>More info in the <a href=\"https://w-orm.d34d.one/dev/?page=W-ORM.Function.Field\">API documentation</a>.</p>\n\n<a href=\"#query-system\" id=\"query-system\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Query system</h2>\n</a>\n<p>All queries start from your <code>Model</code> class:</p>\n<pre><code class=\"language-ts\"><span class=\"pl-c\">// Get with primary key</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">table</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-c1\">get</span>(<span class=\"pl-c1\">1</span>)\n<span class=\"pl-c\">// Get all</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">allTables</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-c1\">all</span>()\n<span class=\"pl-c\">// Get with filter</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">tables</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">filter</span>({ name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span> }).<span class=\"pl-en\">first</span>()\n<span class=\"pl-c\">// Get with advanced filter (user provided function)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">tables2</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">filter</span>({ <span class=\"pl-en\">name</span>: (<span class=\"pl-v\">n</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">n</span>.<span class=\"pl-en\">includes</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Ruiz<span class=\"pl-pds\">'</span></span>) }).<span class=\"pl-en\">first</span>()\n<span class=\"pl-c\">// Get with filter and order</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">tables3</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">filter</span>({ name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span> }).<span class=\"pl-en\">orderBy</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-name<span class=\"pl-pds\">'</span></span>).<span class=\"pl-en\">first</span>()\n<span class=\"pl-c\">// Create a new entry</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">newUser</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">create</span>({ name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span> })\n<span class=\"pl-c\">// Update an entry</span>\n<span class=\"pl-smi\">newUser</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Jane<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-c\">// or with typing support</span>\n<span class=\"pl-smi\">newUser</span>.<span class=\"pl-en\">update</span>({\nname: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Jane<span class=\"pl-pds\">'</span></span>\n})\n<span class=\"pl-c\">// Commit changes</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">newUser</span>.<span class=\"pl-en\">save</span>()\n<span class=\"pl-c\">// Delete an entry</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">newUser</span>.<span class=\"pl-c1\">delete</span>()\n</code></pre>\n<p>More info in the <a href=\"https://w-orm.d34d.one/dev/?page=W-ORM.Class.Model\">API documentation</a>.</p>\n\n<a href=\"#transactions\" id=\"transactions\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Transactions</h2>\n</a>\n<p>Sometimes DB operations are meant to be executed as a &quot;bundle&quot;, so that they either all pass or fail together.</p>\n<p>Transactions allow us to implement this, with automatic rollbacks on error. And even if you don&#39;t need this, there are performance benefits to using transactions.</p>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">await</span> <span class=\"pl-en\">Transaction</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>readwrite<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">async</span> (<span class=\"pl-v\">tx</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">newUser</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">create</span>({ name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John Doe<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-smi\">tx</span>)\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">getUser</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-c1\">get</span>(<span class=\"pl-smi\">newUser</span>.<span class=\"pl-c1\">id</span>, <span class=\"pl-smi\">tx</span>)\n\n  <span class=\"pl-c\">// Any error thrown in the callback will abort the transaction, this will rollback any changes made</span>\n  <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>rollback<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-c\">// If no error is thrown, the transaction will be committed</span>\n})\n</code></pre>\n<blockquote>\n<p><strong>Important note</strong>: Because of a limitation in the IndexedDB API, the transaction will be automatically committed if we wait for any non-transactional operation. (e.g. fetching some data from the network).</p>\n</blockquote>\n<p>More info in the <a href=\"https://w-orm.d34d.one/dev/?page=W-ORM.Function.Transaction\">API documentation</a>.</p>\n\n<a href=\"#migration-system\" id=\"migration-system\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Migration system</h2>\n</a>\n<p>Sometimes, changes to the way existing data is stored are required for an update, to cope with this W-ORM provides an intuitive migration system.</p>\n<p>Migrations are defined as list of functions to be executed, depending on the current and target DB versions.\nThe key is the target version number, and the value is the migration callback.</p>\n<p>Eg. <code>{ 2: (migration) =&gt; { ... } }</code> will execute the migration callback when the current database version is smaller than 2.</p>\n<p>A migration callback receives a \n<code>MigrationContext</code> object as its only argument.\nThis object contains a transaction to be used for the migration.</p>\n<p>It is expected for the callback to create Model classes that represent the table&#39;s state in between these two versions.\nThe fields aren&#39;t actually used by W-ORM in this scenario, and only serve to improve the typing within the migration.</p>\n<p>The <code>Model</code> methods can be then used to manipulate the data.\nIt is very important to use the transaction provided by the migration context, otherwise the migration will hang forever.</p>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">migrations</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MigrationList</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-c1\">2</span>: <span class=\"pl-k\">async</span> (<span class=\"pl-v\">migration</span>) <span class=\"pl-k\">=></span> {\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">User</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Model</span> {\n      <span class=\"pl-v\">id</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">number</span>\n      <span class=\"pl-v\">name</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n    }\n\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">users</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-c1\">all</span>()\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">const</span> <span class=\"pl-c1\">user</span> <span class=\"pl-k\">of</span> <span class=\"pl-smi\">users</span>) {\n      <span class=\"pl-smi\">user</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>${<span class=\"pl-smi\">user</span>.<span class=\"pl-c1\">id</span>} name<span class=\"pl-pds\">`</span></span>\n      <span class=\"pl-k\">await</span> <span class=\"pl-smi\">user</span>.<span class=\"pl-en\">save</span>(<span class=\"pl-smi\">migration</span>.<span class=\"pl-smi\">tx</span>)\n    }\n    <span class=\"pl-c\">// Or with the `forEach method`</span>\n    <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-c1\">forEach</span>(<span class=\"pl-k\">async</span> (<span class=\"pl-v\">instance</span>, <span class=\"pl-v\">tx</span>) <span class=\"pl-k\">=></span> {\n      <span class=\"pl-smi\">instance</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>${<span class=\"pl-smi\">instance</span>.<span class=\"pl-c1\">id</span>} name<span class=\"pl-pds\">`</span></span>\n      <span class=\"pl-k\">await</span> <span class=\"pl-smi\">instance</span>.<span class=\"pl-en\">save</span>(<span class=\"pl-smi\">tx</span>)\n    }, <span class=\"pl-smi\">migration</span>.<span class=\"pl-smi\">tx</span>)\n\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">specificUser</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-c1\">get</span>(<span class=\"pl-c1\">69</span>, <span class=\"pl-smi\">migration</span>.<span class=\"pl-smi\">tx</span>)\n    <span class=\"pl-k\">await</span> <span class=\"pl-smi\">specificUser</span>?.<span class=\"pl-c1\">delete</span>(<span class=\"pl-smi\">migration</span>.<span class=\"pl-smi\">tx</span>)\n  },\n}\n</code></pre>\n<p>More info in the <a href=\"https://w-orm.d34d.one/dev/?page=Types.TypeAlias.MigrationList\">API documentation</a>.</p>\n"}}
