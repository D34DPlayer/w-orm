{"id":0,"name":"@d34d/w-orm - v0.1.0","kind":1,"flags":{},"originalName":"","children":[],"groups":[{"title":"Modules","children":[2,1]}],"is":{"declaration":false},"location":{"query":"index","hash":""},"text":{"readme":"\n<a href=\"#web-orm\" id=\"web-orm\" style=\"color: inherit; text-decoration: none;\">\n  <h1>W(eb)-ORM</h1>\n</a>\n<p><a href=\"https://codecov.io/gh/D34DPlayer/w-orm\"><img src=\"https://codecov.io/gh/D34DPlayer/w-orm/branch/main/graph/badge.svg?token=Y9OI2FEWVA\" alt=\"codecov\"></a></p>\n<p><a href=\"https://d34dplayer.github.io/w-orm\"><strong>Documentation</strong></a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a> is in theory every developer&#39;s dream, having a full database built-in into your browser is amazing. However, if you have tried using it, it&#39;ll feel lacking compared to an actual SQL database, or even a document database.</p>\n<p>This package&#39;s objective is to hide away this ugly truth and expose it with a nice ORM, so that you can forget this is far from being a fully fledged DB.</p>\n\n<a href=\"#overview\" id=\"overview\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Overview</h2>\n</a>\n<p>A table can be simply created as follows:</p>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">Field</span>, <span class=\"pl-smi\">Model</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>@d34d/w-orm<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-k\">enum</span> <span class=\"pl-en\">UserRole</span> {\n  <span class=\"pl-smi\">Admin</span>,\n  <span class=\"pl-smi\">Moderator</span>,\n  <span class=\"pl-smi\">Guest</span>,\n}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">User</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Model</span> {\n  @<span class=\"pl-en\">Field</span>({ primaryKey: <span class=\"pl-c1\">true</span>, <span class=\"pl-en\">default</span>: () <span class=\"pl-k\">=></span> <span class=\"pl-smi\">crypto</span>.<span class=\"pl-en\">randomUUID</span>() })\n  <span class=\"pl-v\">id</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n\n  @<span class=\"pl-en\">Field</span>({ unique: <span class=\"pl-c1\">true</span> })\n  <span class=\"pl-v\">username</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">string</span>\n\n  @<span class=\"pl-en\">Field</span>({ default: <span class=\"pl-smi\">UserRole</span>.<span class=\"pl-smi\">Guest</span> })\n  <span class=\"pl-v\">role</span><span class=\"pl-k\">!:</span> <span class=\"pl-en\">UserRole</span>\n\n  @<span class=\"pl-en\">Field</span>({ nullable: <span class=\"pl-c1\">true</span> })\n  <span class=\"pl-v\">email</span><span class=\"pl-k\">?:</span> <span class=\"pl-c1\">boolean</span>\n\n  @<span class=\"pl-en\">Field</span>({ default: <span class=\"pl-c1\">0</span> })\n  <span class=\"pl-v\">balance</span><span class=\"pl-k\">!:</span> <span class=\"pl-c1\">number</span>\n}\n</code></pre>\n<p>And can be interacted with as follows:</p>\n<pre><code class=\"language-ts\"><span class=\"pl-c\">// With typing support!</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">user</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">create</span>({\n  username: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Joe<span class=\"pl-pds\">'</span></span>,\n  balance: <span class=\"pl-c1\">42</span>,\n})\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">allUsers</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">orderBy</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>id<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">all</span>()\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">otherUser</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">filter</span>({\n  username: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Carlos<span class=\"pl-pds\">'</span></span>,\n}).<span class=\"pl-en\">first</span>()\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">allAdmins</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">filter</span>({\n  role: <span class=\"pl-smi\">UserRole</span>.<span class=\"pl-smi\">Admin</span>,\n}).<span class=\"pl-c1\">all</span>()\n\n<span class=\"pl-c\">// Filters are more powerful than just checking values</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">everyoneInDebt</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">User</span>.<span class=\"pl-en\">filter</span>({\n  <span class=\"pl-en\">balance</span>: (<span class=\"pl-v\">b</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">b</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>\n}).<span class=\"pl-c1\">all</span>()\n\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">otherUser</span>.<span class=\"pl-c1\">remove</span>()\n</code></pre>\n\n<a href=\"#installation\" id=\"installation\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Installation</h2>\n</a>\n<ol>\n<li><p>Install the npm package:\n<code>npm install @d34d/w-orm reflect-metadata</code></p>\n</li>\n<li><p>reflect-metadata needs to be imported somewhere in the global space of your app (eg. index.ts):\n <code>import &quot;reflect-metadata&quot;</code></p>\n</li>\n<li><p>Finally the following needs to be enabled in your <code>tsconfig.json</code></p>\n</li>\n</ol>\n<pre><code class=\"language-json\">{\n  <span class=\"pl-ent\">\"emitDecoratorMetadata\"</span>: <span class=\"pl-c1\">true</span>,\n  <span class=\"pl-ent\">\"experimentalDecorators\"</span>: <span class=\"pl-c1\">true</span>\n}\n</code></pre>\n"}}
